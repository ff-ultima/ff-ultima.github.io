"use strict";(self.webpackChunkff_ultima_wiki=self.webpackChunkff_ultima_wiki||[]).push([[7569],{1480:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"settings/firefox-addon-themes","title":"Firefox Add On Themes","description":"Using add-on themes (extensions) in FF Ultima","source":"@site/docs/settings/firefox-addon-themes.md","sourceDirName":"settings","slug":"/settings/firefox-addon-themes","permalink":"/wiki/docs/settings/firefox-addon-themes","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/settings/firefox-addon-themes.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"description":"Using add-on themes (extensions) in FF Ultima"},"sidebar":"tutorialSidebar","previous":{"title":"Sidebery","permalink":"/wiki/docs/settings/sidebery"},"next":{"title":"Adaptive Tab Color","permalink":"/wiki/docs/settings/adaptive-tab-color"}}');var n=s(4848),i=s(8453);const r={sidebar_position:4,description:"Using add-on themes (extensions) in FF Ultima"},a="Firefox Add On Themes",d={},c=[];function l(e){const t={admonition:"admonition",code:"code",h1:"h1",header:"header",p:"p",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"firefox-add-on-themes",children:"Firefox Add On Themes"})}),"\n",(0,n.jsx)(t.admonition,{type:"note",children:(0,n.jsx)(t.p,{children:"This video is a bit outdated, but the concept remains the same."})}),"\n",(0,n.jsx)(t.p,{children:"By restricting FF Ultima's color schemes to a non-lw-theme state, Firefox add-on themes can be used as normal. But there is 1 specific quirk. Firefox's default appearance allows color-schemes to be very dynamic but also messy in how they apply colors to the browser. The inconsistency of an add-on themes colors can become very visible in a theme that has rounded corners/padding. There is no one-size-fits-all solution to this, but there is a setting that can \"attempt\" to swap an add-on themes colors to correct any inconsistencies."}),"\n",(0,n.jsxs)(t.p,{children:["Use ",(0,n.jsx)(t.code,{children:"user.theme.xtension.swap.addon.colors"})," to swap add-on theme colors."]}),"\n",(0,n.jsx)("iframe",{width:"100%",height:"490",src:"https://www.youtube.com/embed/jYbccJ1nXzk?si=F9jY24aOYcAKUmXy",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",referrerpolicy:"strict-origin-when-cross-origin",allowfullscreen:!0})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>a});var o=s(6540);const n={},i=o.createContext(n);function r(e){const t=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);